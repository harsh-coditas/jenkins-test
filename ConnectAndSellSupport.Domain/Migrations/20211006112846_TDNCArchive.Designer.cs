// <auto-generated />
using System;
using ConnectAndSellSupport.Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ConnectAndSellSupport.Domain.Migrations
{
    [DbContext(typeof(CASContext))]
    [Migration("20211006112846_TDNCArchive")]
    partial class TDNCArchive
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.CasCompanyDisposition", b =>
                {
                    b.Property<int>("CompanyDispositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ContactStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactSubStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("CountAsConversion")
                        .HasColumnType("bit")
                        .HasColumnName("countAsConversion");

                    b.Property<string>("Csvstatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CSVStatus");

                    b.Property<byte>("DispositionMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((3))");

                    b.Property<string>("DispositionText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DispositionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsConversation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFollowUpMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFollowupQuickListEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReferral")
                        .HasColumnType("bit");

                    b.Property<bool>("KeepInSalesloft")
                        .HasColumnType("bit");

                    b.Property<string>("LeadStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LeadSubStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondaryDispositionId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("SecondaryDispositionID");

                    b.Property<string>("SecondaryQuickListId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("CompanyDispositionId")
                        .HasName("PK_CompanyDisposition");

                    b.HasIndex("CompanyId");

                    b.ToTable("cas_CompanyDisposition");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.CasContact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Accepted")
                        .HasColumnType("bit");

                    b.Property<string>("AccountCity")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("AccountState")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("AppointmentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CallOnDays")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CompanyHeadcount")
                        .HasColumnType("int");

                    b.Property<string>("CompanyIndustry")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("CompanyLocation")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("CompanyRevenue")
                        .HasColumnType("int");

                    b.Property<string>("CompanyUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ContactCountry")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactNotes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ContactStatus")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CrmId")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CrmId2")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CrmId3")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CrmObject")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CrmUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CrmtimeZone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CRMTimeZone");

                    b.Property<string>("Custom")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EnrichedCompany")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EnrichedEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EnrichedPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EnrichedPhoneType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("EnrichedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnrichedTitle")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EnrichmentSource")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EnrichmentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ienumbers")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("IENumbers");

                    b.Property<string>("InvalidDirectNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDualSidedConversation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsInjectedContact")
                        .HasColumnType("bit")
                        .HasColumnName("isInjectedContact");

                    b.Property<bool?>("IsPostInjectedContact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("JobPostingDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobPostingTitle")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("LastCall")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastConnectDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastInvalidDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastVoicemail")
                        .HasColumnType("datetime");

                    b.Property<string>("LeadSource")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LinkedInUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("MarkedOnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MostRecentCampaign")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("MovedIntoFollowUpListFromListId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NextCall")
                        .HasColumnType("datetime2");

                    b.Property<string>("NextSteps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpportunityId")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("OriginListName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("PostInjectedContactTime")
                        .HasColumnType("datetime");

                    b.Property<short?>("Priority")
                        .HasColumnType("smallint");

                    b.Property<int?>("ReferralId")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("SecondarySubStatus")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StepNotes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("SubStatus")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WrongNumberPenaltyBoxEntryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ContactId");

                    b.HasIndex("UserId");

                    b.ToTable("cas_Contact");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.CasConversationRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Category1")
                        .HasColumnType("int");

                    b.Property<int?>("Category2")
                        .HasColumnType("int");

                    b.Property<int?>("Category3")
                        .HasColumnType("int");

                    b.Property<int?>("Category4")
                        .HasColumnType("int");

                    b.Property<int?>("Category5")
                        .HasColumnType("int");

                    b.Property<int?>("Category6")
                        .HasColumnType("int");

                    b.Property<int?>("Category7")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Conclusion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("NoteId")
                        .HasColumnType("int");

                    b.Property<string>("RateNote1")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RateNote2")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RateNote3")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RateNote4")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RateNote5")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RateNote6")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RateNote7")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RateNoteBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("cas_ConversationRating");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.CasConversationTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsListened")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRated")
                        .HasColumnType("bit");

                    b.Property<int>("LeadTransitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RatingCount")
                        .HasColumnType("int");

                    b.Property<int>("RecordingListenedInPercentage")
                        .HasColumnType("int");

                    b.Property<string>("RecordingListenedMap")
                        .IsRequired()
                        .HasMaxLength(105)
                        .IsUnicode(false)
                        .HasColumnType("varchar(105)");

                    b.Property<int>("TimeSpentInSec")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("cas_ConversationTracking");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.CasList", b =>
                {
                    b.Property<int>("ListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("AssignmentType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("AutoRefreshEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("BadDataCount")
                        .HasColumnType("int");

                    b.Property<string>("CallStarterText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DefaultCallerId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Delay")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("DialToConnectRatio")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int?>("DialingMode")
                        .HasColumnType("int");

                    b.Property<bool?>("DoNotUpdateLeadOwner")
                        .HasColumnType("bit");

                    b.Property<bool>("EnrichmentActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConnectOnHello")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDialingModeRecommended")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFollowUpList")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLeadInjectAllowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsOodlist")
                        .HasColumnType("bit")
                        .HasColumnName("IsOODList");

                    b.Property<bool?>("IsSmartList")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LeadPoolCheckoutSize")
                        .HasColumnType("int");

                    b.Property<int?>("LeadPoolSize")
                        .HasColumnType("int");

                    b.Property<string>("ListCampaignId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ListCampaignID");

                    b.Property<int?>("ListTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MaxAttempts")
                        .HasColumnType("int");

                    b.Property<int>("MaxAttemptsList")
                        .HasColumnType("int");

                    b.Property<int?>("MlPredictionAccuracy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SettingMetaData")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("SfReportPath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("TotalPredictedAttempts")
                        .HasColumnType("int");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("Updatedate")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedate");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ListId");

                    b.HasIndex(new[] { "UserId" }, "IDX_NC_cas_List_UserId");

                    b.ToTable("cas_List");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.CasMeeting", b =>
                {
                    b.Property<int>("MeetingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CalendarMeetingId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsMeetingOccured")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMeetingOnTarget")
                        .HasColumnType("bit");

                    b.Property<int?>("LeadTransitId")
                        .HasColumnType("int");

                    b.Property<int?>("ListId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("MeetingDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("ResponseEmailSent")
                        .HasColumnType("bit");

                    b.Property<string>("ServiceProvider")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("SessionType")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MeetingId");

                    b.ToTable("cas_Meeting");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.CasMeetingInvitee", b =>
                {
                    b.Property<int>("MeetingInviteeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("InviteeEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InviteeResponse")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("InviteeType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("MeetingInviteeId");

                    b.HasIndex("MeetingId");

                    b.ToTable("cas_MeetingInvitee");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.CasNote", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CallSentiment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Disposition")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsBlindLead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsCheckedForReview")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsColv")
                        .HasColumnType("bit")
                        .HasColumnName("IsCOLV");

                    b.Property<bool?>("IsConversation")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("LeadTransitId")
                        .HasColumnType("int");

                    b.Property<int?>("ListId")
                        .HasColumnType("int");

                    b.Property<int?>("ListOwnerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NextCallDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NextSteps")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ReviewDescription")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasDefaultValueSql("('')");

                    b.Property<byte?>("SessionType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TalkTime")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WrapTime")
                        .HasColumnType("int");

                    b.HasKey("NoteId");

                    b.HasIndex(new[] { "ContactId", "IsConversation", "CreateDate" }, "IX_CasNote_ContactID_Conversation_CreateDate");

                    b.HasIndex(new[] { "LeadTransitId" }, "IX_cas_Note_LeadTransistId");

                    b.ToTable("cas_Note");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.CasSiebelUserMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SiebelUserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("cas_SiebelUserMapping");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.CasUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("FailedPasswordAttempts")
                        .HasColumnType("int");

                    b.Property<bool?>("IsApproved")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPasswordReset")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTourCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoggedIn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LockedOutOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ModUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Otp")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasColumnName("OTP");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("PasswordChangedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PasswordResetExpiresOn")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("cas_User");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.TCall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActualLeadDisplayTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("AutoAgentCode")
                        .HasColumnType("int");

                    b.Property<int?>("AvgLatency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CachedLeadDisplayTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CallAlert")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CallListId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CallSendTime")
                        .HasColumnType("datetime");

                    b.Property<byte?>("CallType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CampaignName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CampaignUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ClientName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CompanyAddr1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CompanyAddr2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CompanyCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyCountry")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyExt1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CompanyExt2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CompanyInfo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CompanyState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("CompanyTel1")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("CompanyTel2")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("CompanyUrl")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CompanyURL");

                    b.Property<string>("CompanyZip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ContactAddr1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactAddr2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactBackground")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ContactCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactCountry")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactDept")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactExt1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ContactExt2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ContactFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("ContactJobTitle")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ContactLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContactSalutation")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ContactState")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("ContactTel1")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("ContactTel2")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("ContactZip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('Unknown')");

                    b.Property<string>("CrmId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DialedProbableDirectNumber")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<int?>("DispositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("DispositionText")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short?>("DispositionType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EngineCallConnectTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EngineCallSignalTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("FailedCalls")
                        .HasColumnType("int");

                    b.Property<bool>("IsBlindLead")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsColv")
                        .HasColumnType("bit")
                        .HasColumnName("IsCOLV");

                    b.Property<bool?>("IsConnectOnHello")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsConversation")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsFollowUpMarked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGracefulExit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMeetingSet")
                        .HasColumnType("bit");

                    b.Property<byte?>("IsReferral")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte?>("IsTransfer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsValidConnect")
                        .HasColumnType("bit");

                    b.Property<bool?>("LeadActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LeadCatchTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<string>("LeadListName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("LeadSendTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("LeadTransitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ModUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('Unknown')");

                    b.Property<DateTime?>("NameCatchTime")
                        .HasColumnType("datetime");

                    b.Property<string>("NoteText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("NumVoicemails")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PhoneSysConnectTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PopupTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("PrimaryNumberIndex")
                        .HasColumnType("int");

                    b.Property<int?>("ProblemCodes")
                        .HasColumnType("int");

                    b.Property<string>("ProblemComments")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("Redials")
                        .HasColumnType("int");

                    b.Property<string>("Referrer")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('')");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int");

                    b.Property<string>("SessionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<byte?>("SessionType")
                        .HasColumnType("tinyint");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("TalkTime")
                        .HasColumnType("int");

                    b.Property<int?>("TalkTimeInMilliseconds")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ThrowTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("TransferHangup")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserPostAction")
                        .HasColumnType("int");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.Property<bool>("VoicemailLeft")
                        .HasColumnType("bit");

                    b.Property<int?>("WaitTime")
                        .HasColumnType("int");

                    b.Property<bool?>("WasPredictedAsTransfer")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientName", "ThrowTime" }, "IDX_NC_t_Call_ClientNameThrowtime");

                    b.HasIndex(new[] { "CallListId", "IsConversation" }, "IDX_NC_t_call_CallListIdIsConversation");

                    b.HasIndex(new[] { "Id", "ThrowTime" }, "IDX_NC_t_call_IDThrowTime");

                    b.HasIndex(new[] { "ThrowTime", "ProblemCodes" }, "IDX_NC_t_call_ThrowtimeProblemCodes");

                    b.HasIndex(new[] { "ClientName" }, "IX_t_Call");

                    b.HasIndex(new[] { "LeadId" }, "IX_t_Call_AttemptedLeads");

                    b.HasIndex(new[] { "CampaignName" }, "IX_t_Call_CampaignName");

                    b.HasIndex(new[] { "ClientName" }, "IX_t_Call_ClientName");

                    b.HasIndex(new[] { "ContactId" }, "IX_t_Call_Contactid");

                    b.HasIndex(new[] { "CreateDate" }, "IX_t_Call_CreateDate");

                    b.HasIndex(new[] { "LeadTransitId" }, "IX_t_Call_LinkID");

                    b.HasIndex(new[] { "SessionId" }, "IX_t_Call_SessionID");

                    b.HasIndex(new[] { "ThrowTime", "EndTime" }, "IX_t_Call_ThrowTime_EndTime");

                    b.HasIndex(new[] { "UserName" }, "IX_t_Call_UserName");

                    b.HasIndex(new[] { "UserRole" }, "IX_t_Call_UserRole");

                    b.HasIndex(new[] { "VoicemailLeft" }, "IX_t_Call_VoiceMailLeft");

                    b.HasIndex(new[] { "ContactTel1" }, "NonClusteredIndex-20150817-021414");

                    b.HasIndex(new[] { "ContactTel2" }, "NonClusteredIndex-20150817-021513");

                    b.HasIndex(new[] { "ContactId", "Id", "CreateDate", "CallListId" }, "_dta_index_t_Call_5_1330103779__K80_K1_K62");

                    b.HasIndex(new[] { "IsValidConnect", "ClientName", "Id", "EndTime", "CampaignName", "DispositionText" }, "_dta_index_t_Call_6_1330103779__K77_K4_K1_K13_K7_K22_69");

                    b.HasIndex(new[] { "Id", "ThrowTime" }, "_dta_index_t_Call_7_1330103779__K1_K10");

                    b.HasIndex(new[] { "CallListId", "DispositionText", "ThrowTime", "ClientName", "UserName", "SessionId", "CampaignName" }, "_dta_index_t_Call_7_1330103779__K81_K22_K10_K4_K5_K73_K7_1_77_83");

                    b.HasIndex(new[] { "ClientName" }, "idx_SS_t_Call_ClientName");

                    b.HasIndex(new[] { "UserName", "ThrowTime" }, "idx_SS_t_Call_Username_Throwtime");

                    b.ToTable("t_Call");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.TCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountMgr")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime?>("AccountMgrDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClientSvcsMgr")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime?>("ClientSvcsMgrDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Colvpriority")
                        .HasColumnType("int")
                        .HasColumnName("COLVPriority");

                    b.Property<int?>("Colvsla")
                        .HasColumnType("int")
                        .HasColumnName("COLVSla");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('Unknown')");

                    b.Property<string>("CrmLoginMask")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("CrmUrlFormat")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Employees")
                        .HasColumnType("int");

                    b.Property<string>("Ext1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Ext2")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Fax")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FaxExt")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Fax_Ext");

                    b.Property<decimal?>("Growth")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("Identifier")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDispositionRequired")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsVoicemailEnabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("Memo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ModUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('Unknown')");

                    b.Property<string>("Overview")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("PermittedRoles")
                        .HasColumnType("int");

                    b.Property<string>("PreferredCrm")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasDefaultValueSql("('Salesforce')");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((5))");

                    b.Property<decimal?>("Revenue")
                        .HasColumnType("decimal(18,0)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SalesRep")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime?>("SalesRepDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ScriptCompanyName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("SessionReportDl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("SessionReportDL");

                    b.Property<string>("SfaccountUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("SFAccountURL");

                    b.Property<int>("Sla")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((7))");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Tel1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Tel2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Url")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("URL");

                    b.Property<string>("Zip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Identifier" }, "IX_t_Company")
                        .IsUnique()
                        .HasFilter("[Identifier] IS NOT NULL");

                    b.ToTable("t_Company");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.TDnc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Agent")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("ClientCompany")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("ClientCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("ClientCompanyID");

                    b.Property<string>("ContactCompany")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactCountry")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ContactTitle")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('Administrator')");

                    b.Property<DateTime>("Dncexpires")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("DNCExpires")
                        .HasDefaultValueSql("('2000-01-01')");

                    b.Property<int>("Dnctype")
                        .HasColumnType("int")
                        .HasColumnName("DNCType");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("ModUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('Administrator')");

                    b.Property<string>("Pitcher")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("ReasonMessage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasDefaultValueSql("('')");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ClientCompanyId");

                    b.ToTable("t_Dnc");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.TDncArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Agent")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('')");

                    b.Property<DateTime>("ArchiveDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("ArchiveUserId")
                        .HasColumnType("int")
                        .HasColumnName("ArchiveUserID");

                    b.Property<string>("ClientCompany")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("ClientCompanyId")
                        .HasColumnType("int")
                        .HasColumnName("ClientCompanyID");

                    b.Property<string>("ContactCompany")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactCountry")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ContactTitle")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('Administrator')");

                    b.Property<DateTime>("Dncexpires")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("DNCExpires")
                        .HasDefaultValueSql("('2000-01-01')");

                    b.Property<int>("Dnctype")
                        .HasColumnType("int")
                        .HasColumnName("DNCType");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("ModUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('Administrator')");

                    b.Property<string>("Pitcher")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("ReasonMessage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasDefaultValueSql("('')");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ArchiveUserId");

                    b.HasIndex("ClientCompanyId");

                    b.ToTable("t_Dnc_Archive");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.TUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountType")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Background")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CallbackNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('')");

                    b.Property<int>("CatMetric")
                        .HasColumnType("int")
                        .HasColumnName("cat_metric");

                    b.Property<string>("Category")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("category")
                        .HasDefaultValueSql("('default')");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Colvpriority")
                        .HasColumnType("int")
                        .HasColumnName("COLVPriority");

                    b.Property<int?>("Colvsla")
                        .HasColumnType("int")
                        .HasColumnName("COLVSla");

                    b.Property<int>("Commented")
                        .HasColumnType("int")
                        .HasColumnName("commented");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyID")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('Unknown')");

                    b.Property<string>("DataSourceName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("DomainId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasDefaultValueSql("('')");

                    b.Property<bool>("DomainLoginRequired")
                        .HasColumnType("bit");

                    b.Property<string>("DotNetVersion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Email1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Email2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<byte>("ExistingUserActivationStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("Ext1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Ext2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FaxExt")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Fax_Ext");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("filename");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("FirstUsageDate")
                        .HasColumnType("datetime");

                    b.Property<int>("HourlyRate")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ImageUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ImageURL");

                    b.Property<int>("InviteAlertMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((60))");

                    b.Property<bool?>("IsAvailableForHotTransfer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBetaUser")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsLightningOnly")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageSkills")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LocationCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('(none)')");

                    b.Property<string>("LoginEmailId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("LoginEmailID");

                    b.Property<string>("LoginId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LoginID");

                    b.Property<string>("LoginPageFragment")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("LoginPw")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LoginPW");

                    b.Property<DateTime>("ModDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ModUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('Unknown')");

                    b.Property<int?>("PermittedRoles")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<bool?>("RequiresDispositions")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Sla")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Tel1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Tel2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TimeZoneId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Title")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("VarMetric")
                        .HasColumnType("int")
                        .HasColumnName("var_metric");

                    b.Property<string>("VarName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("var_name");

                    b.Property<string>("VarVal")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("var_val");

                    b.Property<int>("VoicemailLength")
                        .HasColumnType("int");

                    b.Property<string>("Zip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "CompanyName" }, "IX_t_User_CompanyName");

                    b.HasIndex(new[] { "DomainId", "IsDeleted" }, "IX_t_User_DomainId_IsDeleted");

                    b.HasIndex(new[] { "Identifier" }, "IX_t_User_Identifier");

                    b.HasIndex(new[] { "IsDeleted" }, "IX_t_User_IsDeleted");

                    b.HasIndex(new[] { "LoginId" }, "IX_t_User_LoginId");

                    b.HasIndex(new[] { "LoginId", "IsDeleted" }, "IX_t_User_LoginId_IsDeleted");

                    b.HasIndex(new[] { "UserName" }, "IX_t_User_UserName");

                    b.HasIndex(new[] { "Commented", "Filename" }, "filename_comment");

                    b.ToTable("t_User");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.CasCompanyDisposition", b =>
                {
                    b.HasOne("ConnectAndSellSupport.Domain.Models.TCompany", "Company")
                        .WithMany("CasCompanyDispositions")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_cas_CompanyDisposition_t_Company")
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.CasContact", b =>
                {
                    b.HasOne("ConnectAndSellSupport.Domain.Models.TUser", "User")
                        .WithMany("CasContacts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_cas_Contact_t_User")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.CasList", b =>
                {
                    b.HasOne("ConnectAndSellSupport.Domain.Models.TUser", "User")
                        .WithMany("CasLists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_cas_List_t_User")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.CasMeetingInvitee", b =>
                {
                    b.HasOne("ConnectAndSellSupport.Domain.Models.CasMeeting", "Meeting")
                        .WithMany("CasMeetingInvitees")
                        .HasForeignKey("MeetingId")
                        .HasConstraintName("FK_cas_MeetingInvitee_cas_Meeting")
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.CasNote", b =>
                {
                    b.HasOne("ConnectAndSellSupport.Domain.Models.CasContact", "Contact")
                        .WithMany("CasNotes")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_cas_Note_cas_Contact")
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.CasUser", b =>
                {
                    b.HasOne("ConnectAndSellSupport.Domain.Models.TUser", "User")
                        .WithMany("CasUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__cas_User__UserId__3A379A64")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.TDnc", b =>
                {
                    b.HasOne("ConnectAndSellSupport.Domain.Models.TCompany", "ClientCompanyNavigation")
                        .WithMany("TDncs")
                        .HasForeignKey("ClientCompanyId")
                        .HasConstraintName("FK_t_Dnc_t_Company")
                        .IsRequired();

                    b.Navigation("ClientCompanyNavigation");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.TDncArchive", b =>
                {
                    b.HasOne("ConnectAndSellSupport.Domain.Models.TUser", "ArchiveUser")
                        .WithMany("TDncArchives")
                        .HasForeignKey("ArchiveUserId")
                        .HasConstraintName("FK_t_Dnc_Archive_t_ArchiveUserID")
                        .IsRequired();

                    b.HasOne("ConnectAndSellSupport.Domain.Models.TCompany", "ClientCompanyNavigation")
                        .WithMany("TDncArchives")
                        .HasForeignKey("ClientCompanyId")
                        .HasConstraintName("FK_t_Dnc_Archive_t_Company")
                        .IsRequired();

                    b.Navigation("ArchiveUser");

                    b.Navigation("ClientCompanyNavigation");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.TUser", b =>
                {
                    b.HasOne("ConnectAndSellSupport.Domain.Models.TCompany", "Company")
                        .WithMany("TUsers")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_t_User_t_Company")
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.CasContact", b =>
                {
                    b.Navigation("CasNotes");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.CasMeeting", b =>
                {
                    b.Navigation("CasMeetingInvitees");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.TCompany", b =>
                {
                    b.Navigation("CasCompanyDispositions");

                    b.Navigation("TDncArchives");

                    b.Navigation("TDncs");

                    b.Navigation("TUsers");
                });

            modelBuilder.Entity("ConnectAndSellSupport.Domain.Models.TUser", b =>
                {
                    b.Navigation("CasContacts");

                    b.Navigation("CasLists");

                    b.Navigation("CasUsers");

                    b.Navigation("TDncArchives");
                });
#pragma warning restore 612, 618
        }
    }
}
